"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.components import metadata as components_metadata
from ...models.components import product as components_product
from dataclasses_json import Undefined, dataclass_json
from typing import Any, Dict, List, Optional
from venariai import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SneakerIDBatchResponseBody:
    r"""Successful processing of batch of image URLs"""
    confidence: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence') }})
    r"""The inference confidence value."""
    meta: components_metadata.MetaData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})
    product: components_product.Product = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product') }})
    custom: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom'), 'exclude': lambda f: f is None }})
    r"""User-defined flat object to be returned in the response."""
    variants: Optional[List[components_product.Product]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variants'), 'exclude': lambda f: f is None }})
    



@dataclasses.dataclass
class SneakerIDBatchResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    object: Optional[SneakerIDBatchResponseBody] = dataclasses.field(default=None)
    r"""Successful processing of batch of image URLs"""
    

